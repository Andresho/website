input sampleXY {
  x: [String]!
  y: [String]!
}

input sampleY {
  y: [String]!
}

type Mutation {
  putSample(key: String!, input: sampleXY!): sample
  checkInSample(id: String!, input: sampleY!): sample
}

type Query {
  checkOutSample(poolID: String!): sample
}

type Subscription {
  onSampleCompleted(poolID: String): sample
    @aws_subscribe(mutations: ["checkInSample"])
}

type User
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(rules: [{ allow: owner, ownerField: "id", operations: [read] }]) {
  id: ID!
  name: String
    @auth(
      rules: [{ allow: owner, ownerField: "id", operations: [update, read] }]
    )
  email: String
    @auth(
      rules: [{ allow: owner, ownerField: "id", operations: [update, read] }]
    )

  createdOn: AWSDateTime
  updatedOn: AWSDateTime
}

enum ExperimentStatus {
  OPEN
  ClOSED
}

type Experiment
  @key(name: "catagorysByStatus", fields: ["status", "title"])
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(
    rules: [
      { allow: groups, groups: ["admin"], operations: [create, update] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  poolID: ID!
  pool: Pool @connection(fields: ["poolID"])!
  status: ExperimentStatus!
}

type Pool
  #@key(name: "poolsById", fields: ["id"], queryField: "poolsById") #For connection to tables
  @key(name: "byKey", fields: ["privateKey"], queryField: "byKey")
  @model(timestamps: { createdAt: "createdAt", updatedAt: "updatedAt" })
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["admin"], operations: [create, update, delete] }
    ]
  ) {
  id: ID!
  title: String!
  description: String!
  dataNames: [String]!
  dataTypes: [dataTypes]!
  createdAt: AWSDateTime
}

enum dataTypes {
  TEXT
  IMAGE
}

type sample
  @key(name: "byPoolID", fields: ["poolID"], queryField: "byPoolID") #For connection to tables
  @key(
    name: "byLabeled"
    fields: ["poolID", "labeledStatus"]
    queryField: "byLabeled"
  ) #For user sample selection
  #@key(name: "byStatus", fields: ["labeledStatus", "modifiedAt"] queryField: "byStatus") #For the lambda cleaner cron job
  @model(
    timestamps: { createdAt: "createdAt" }
    #mutations: null
    #subscriptions: null
  )
  @auth(rules: [{ allow: private, operations: [read, update] }]) {
  datasetID: ID!
  id: ID!
  data: [String]!
  modifiedBy: [String]
  modifiedAt: AWSDateTime
  createdAt: AWSDateTime
  labeledStatus: sampleStatus
}

enum sampleStatus {
  COMPLETED
  CHECKEDOUT
  UNCOMPLETED
}
